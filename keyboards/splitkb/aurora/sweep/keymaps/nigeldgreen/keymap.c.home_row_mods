#include QMK_KEYBOARD_H

/* Define our QWERTY home row mods */
#define ALT_A ALT_T(KC_A)
#define ALT_SC ALT_T(KC_SCLN)
#define ALT_O ALT_T(KC_O)
#define GUI_S GUI_T(KC_S)
#define GUI_R GUI_T(KC_R)
#define GUI_L GUI_T(KC_L)
#define GUI_I GUI_T(KC_I)
#define SFT_D SFT_T(KC_D)
#define SFT_S SFT_T(KC_S)
#define SFT_K SFT_T(KC_K)
#define SFT_E SFT_T(KC_E)
#define CTL_F CTL_T(KC_F)
#define _CTL_T CTL_T(KC_T)
#define CTL_J CTL_T(KC_J)
#define CTL_N CTL_T(KC_N)
#define MEH_G MEH_T(KC_G)
#define MEH_H MEH_T(KC_H)
#define MEH_M MEH_T(KC_M)
/* Define our layer switching keys */
#define SYM_TAB LT(2, KC_TAB)
#define NUM_ESC LT(4, KC_ESC)
#define SYM_SPC LT(3, KC_SPC)
#define FUN_ENT LT(5, KC_ENT)

bool get_retro_tapping(uint16_t keycode, keyrecord_t *record) {
    switch (keycode) {
        case ALT_A:
        case ALT_SC:
        case GUI_S:
        case GUI_L:
        case SFT_D:
        case SFT_K:
        case CTL_F:
        case CTL_J:
        case MEH_G:
        case MEH_H:
        case SYM_TAB:
        case NUM_ESC:
        case SYM_SPC:
        case FUN_ENT:
            return true;
        default:
            return false;
    }
}

enum custom_keycodes {
    COMSPC = SAFE_RANGE,
};

bool process_record_user(uint16_t keycode, keyrecord_t *record) {
    switch (keycode) {
    case COMSPC:
        if (record->event.pressed) {
            SEND_STRING(", ");
         }
         break;
    }
    return true;
};

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
  [0] = LAYOUT(
         KC_Q,      KC_W,     KC_E,        KC_R,      KC_T,           KC_Y,      KC_U,       KC_I,     KC_O,     KC_P,
        ALT_A,     GUI_S,    SFT_D,       CTL_F,     MEH_G,           MEH_H,     CTL_J,      SFT_K,    GUI_L,    ALT_SC,
      SC_LSPO,      KC_X,     KC_C,        KC_V,      KC_B,           KC_N,      KC_M,       KC_COMM,  KC_DOT,   SC_RSPC,
                                        SYM_TAB,   NUM_ESC,           FUN_ENT,   SYM_SPC
  ),
  [1] = LAYOUT(
         KC_Q,      KC_W,     KC_F,        KC_P,      KC_B,           KC_J,      KC_L,       KC_U,     KC_Y,     KC_SCLN,
        ALT_A,     GUI_R,    SFT_S,      _CTL_T,     MEH_G,           MEH_M,     CTL_N,      SFT_E,    GUI_I,    ALT_O,
      SC_LSPO,      KC_X,     KC_C,        KC_D,      KC_V,           KC_K,      KC_H,       KC_COMM,  KC_DOT,   SC_RSPC,
                                        SYM_TAB,   NUM_ESC,           FUN_ENT,   SYM_SPC
  ),
  [2] = LAYOUT(
        DF(0),     KC_NO,  KC_BSPC,      KC_DEL,   KC_NUBS,           KC_PGUP,   S(KC_MINS), KC_MINS,  KC_EQL,   S(KC_2),
        DF(1),     KC_NO,   KC_SPC,      KC_ENT,   KC_HOME,           KC_LEFT,   KC_DOWN,    KC_UP,    KC_RIGHT, KC_QUOT,
      KC_LSFT,   C(KC_X),  C(KC_C),     C(KC_V),    KC_END,           KC_PGDN,   S(KC_NUHS), KC_SLSH,  KC_QUES,  CW_TOGG,
                                        KC_TRNS,     KC_NO,           KC_DEL,    KC_BSPC
  ),
  [3] = LAYOUT(
       KC_GRV,   KC_PERC,   KC_AMPR,    KC_NUHS,   S(KC_6),           KC_NO,     KC_NO,      KC_NO,    KC_NO,    KC_NO,
   S(KC_NUBS),   KC_ASTR,   KC_EXLM,    KC_QUOT,   S(KC_2),           KC_NO,     KC_NO,      KC_NO,    KC_NO,    KC_NO,
         KC_Z,   KC_DLR, S(KC_QUOT),    KC_LBRC,   KC_RBRC,           KC_NO,     KC_NO,      KC_NO,    KC_NO,    KC_LSFT,
                                          KC_NO,     KC_NO,           KC_NO,     KC_TRNS
  ),
  [4] = LAYOUT(
        KC_NO,     KC_NO,     KC_NO,      KC_NO,     KC_NO,           KC_NO,     KC_7,       KC_8,     KC_9,     KC_MINS,
        KC_NO,     KC_NO,     KC_NO,      KC_NO,     KC_NO,           KC_NO,     KC_4,       KC_5,     KC_6,     COMSPC,
        KC_NO,     KC_NO,     KC_NO,      KC_NO,     KC_NO,           KC_NO,     KC_1,       KC_2,     KC_3,     KC_PLUS,
                                          KC_NO,   KC_TRNS,           KC_BSPC,   KC_0
  ),
  [5] = LAYOUT(
        KC_NO,     KC_F7,     KC_F8,      KC_F9,    KC_F10,           KC_NO,     KC_NO,      KC_NO,     KC_NO,   KC_NO,
      QK_BOOT,     KC_F4,     KC_F5,      KC_F6,    KC_F11,           KC_NO,     KC_NO,      KC_NO,     KC_NO,   KC_NO,
        KC_NO,     KC_F1,     KC_F2,      KC_F3,    KC_F12,           KC_NO,     KC_NO,      KC_NO,     KC_NO,   KC_NO,
                                          KC_NO,     KC_NO,           KC_TRNS,   KC_NO
  ),
    uu
};
